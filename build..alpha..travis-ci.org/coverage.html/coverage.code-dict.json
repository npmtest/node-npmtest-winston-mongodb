{"/home/travis/build/npmtest/node-npmtest-winston-mongodb/test.js":"/* istanbul instrument in package npmtest_winston_mongodb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-mongodb/lib.npmtest_winston_mongodb.js":"/* istanbul instrument in package npmtest_winston_mongodb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_winston_mongodb = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_winston_mongodb = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-mongodb/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-winston-mongodb && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_winston_mongodb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_winston_mongodb\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_winston_mongodb.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_winston_mongodb.rollup.js'] =\n            local.assetsDict['/assets.npmtest_winston_mongodb.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_winston_mongodb.__dirname + '/lib.npmtest_winston_mongodb.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-mongodb/node_modules/winston-mongodb/lib/winston-mongodb.js":"/**\n * @module 'winston-mongodb'\n * @fileoverview Winston transport for logging into MongoDB\n * @license MIT\n * @author charlie@nodejitsu.com (Charlie Robbins)\n * @author 0@39.yt (Yurij Mikhalevich)\n */\n'use strict';\nconst util = require('util');\nconst os = require('os');\nconst mongodb = require('mongodb');\nconst winston = require('winston');\nconst Stream = require('stream').Stream;\nconst helpers = require('./helpers');\n\n\n\n/**\n * Constructor for the MongoDB transport object.\n * @constructor\n * @param {Object} options\n * @param {string=info} options.level Level of messages that this transport\n * should log.\n * @param {boolean=false} options.silent Boolean flag indicating whether to\n * suppress output.\n * @param {string|Object} options.db MongoDB connection uri or preconnected db\n * object.\n * @param {Object} options.options MongoDB connection parameters\n * (optional, defaults to `{poolSize: 2, autoReconnect: true}`).\n * @param {string=logs} options.collection The name of the collection you want\n * to store log messages in.\n * @param {boolean=false} options.storeHost Boolean indicating if you want to\n * store machine hostname in logs entry, if set to true it populates MongoDB\n * entry with 'hostname' field, which stores os.hostname() value.\n * @param {string} options.username The username to use when logging into\n * MongoDB.\n * @param {string} options.password The password to use when logging into\n * MongoDB. If you don't supply a username and password it will not use MongoDB\n * authentication.\n * @param {string} options.label Label stored with entry object if defined.\n * @param {string} options.name Transport instance identifier. Useful if you\n * need to create multiple MongoDB transports.\n * @param {boolean=false} options.capped In case this property is true,\n * winston-mongodb will try to create new log collection as capped.\n * @param {number=10000000} options.cappedSize Size of logs capped collection\n * in bytes.\n * @param {number} options.cappedMax Size of logs capped collection in number\n * of documents.\n * @param {boolean=false} options.tryReconnect Will try to reconnect to the\n * database in case of fail during initialization. Works only if `db` is\n * a string.\n * @param {boolean=false} options.decolorize Will remove color attributes from\n * the log entry message.\n * @param {number} options.expireAfterSeconds Seconds before the entry is removed. Do not use if capped is set.\n */\nlet MongoDB = exports.MongoDB = function(options) {\n  winston.Transport.call(this, options);\n  options = (options || {});\n  if (!options.db) {\n    throw new Error('You should provide db to log to.');\n  }\n  this.name = options.name || 'mongodb';\n  this.db = options.db;\n  this.options = options.options;\n  if (!this.options) {\n    this.options = {\n      poolSize: 2,\n      autoReconnect: true\n    };\n  }\n  this.collection = (options.collection || 'log');\n  this.level = (options.level || 'info');\n  this.silent = options.silent;\n  this.username = options.username;\n  this.password = options.password;\n  this.storeHost = options.storeHost;\n  this.label = options.label;\n  this.capped = options.capped;\n  this.cappedSize = (options.cappedSize || 10000000);\n  this.cappedMax = options.cappedMax;\n  this.decolorize = options.decolorize;\n  this.expireAfterSeconds = !this.capped && options.expireAfterSeconds;\n  if (this.storeHost) {\n    this.hostname = os.hostname();\n  }\n  this._opQueue = [];\n  let self = this;\n\n  function setupDatabaseAndEmptyQueue(db) {\n    return authorizeDb(db).then(createCollection, err=>{\n      db.close();\n      console.error('winston-mongodb, initialization error: ', err);\n    }).then(db=>{\n      self.logDb = db;\n      processOpQueue();\n    });\n  }\n  function processOpQueue() {\n    self._opQueue.forEach(operation=>\n      self[operation.method].apply(self, operation.args));\n    delete self._opQueue;\n  }\n  function createCollection(db) {\n    let opts = self.capped ?\n      {capped: true, size: self.cappedSize, max: self.cappedMax} : {};\n    return db.createCollection(self.collection, opts).then(col=>{\n      const ttlIndexName = 'timestamp_1';\n      let indexOpts = {name: ttlIndexName, background: true};\n      if (self.expireAfterSeconds) {\n        indexOpts.expireAfterSeconds = self.expireAfterSeconds;\n      }\n      return col.indexInformation({full: true}).then(info=>{\n        info = info.filter(i=>i.name === ttlIndexName);\n        if (info.length === 0) { // if its a new index then create it\n          return col.createIndex({timestamp: -1}, indexOpts);\n        } else { // if index existed with the same name check if expireAfterSeconds param has changed\n          if (info[0].expireAfterSeconds !== undefined &&\n              info[0].expireAfterSeconds !== self.expireAfterSeconds) {\n            return col.dropIndex(ttlIndexName)\n            .then(()=>col.createIndex({timestamp: -1}, indexOpts));\n          }\n        }\n      });\n    }).then(()=>db);\n  }\n  function authorizeDb(db) {\n    if (self.username && self.password) {\n      return db.authenticate(self.username, self.password).then(ok=>{\n        if (!ok) {\n          throw new Error('invalid username or password');\n        }\n        return db;\n      });\n    } else {\n      return new Promise(resolve=>resolve(db));\n    }\n  }\n  function connectToDatabase(logger) {\n    return mongodb.MongoClient.connect(logger.db, logger.options\n    ).then(setupDatabaseAndEmptyQueue, err=>{\n      console.error('winston-mongodb: error initialising logger', err);\n      if (options.tryReconnect) {\n        console.log('winston-mongodb: will try reconnecting in 10 seconds');\n        return new Promise(resolve=>setTimeout(resolve, 10000)\n        ).then(()=>connectToDatabase(logger));\n      }\n    });\n  }\n\n  if ('string' === typeof this.db) {\n    connectToDatabase(this);\n  } else if ('function' === typeof this.db.then) {\n    this.db.then(setupDatabaseAndEmptyQueue, err=>console.error(\n        'winston-mongodb: error initialising logger from promise', err));\n  } else { // preconnected object\n    setupDatabaseAndEmptyQueue(this.db);\n  }\n};\n\n\n/**\n * Inherit from `winston.Transport`.\n */\nutil.inherits(MongoDB, winston.Transport);\n\n\n/**\n * Define a getter so that `winston.transports.MongoDB`\n * is available and thus backwards compatible.\n */\nwinston.transports.MongoDB = MongoDB;\n\n\n/**\n * Closes MongoDB connection so using process would not hang up.\n * Used by winston Logger.close on transports.\n */\nMongoDB.prototype.close = function() {\n  if (!this.logDb) {\n    return;\n  }\n  this.logDb.close().then(()=>this.logDb = null).catch(err=>{\n    console.error('Winston MongoDB transport encountered on error during '\n        + 'closing.', err);\n  });\n};\n\n\n/**\n * Core logging method exposed to Winston. Metadata is optional.\n * @param {string} level Level at which to log the message.\n * @param {string} msg Message to log\n * @param {Object=} opt_meta Additional metadata to attach\n * @param {Function} cb Continuation to respond to when complete.\n */\nMongoDB.prototype.log = function(level, msg, opt_meta, cb) {\n  if (!this.logDb) {\n    this._opQueue.push({method: 'log', args: arguments});\n    return;\n  }\n  // Avoid reentrancy that can be not assumed by database code.\n  // If database logs, better not to call database itself in the same call.\n  process.nextTick(()=>{\n    if (this.silent) {\n      cb(null, true);\n      return;\n    }\n    let entry = {timestamp: new Date(), level};\n    entry.message = this.decolorize ? msg.replace(/\\u001b\\[[0-9]{1,2}m/g, '') : msg;\n    entry.meta = helpers.prepareMetaData(opt_meta);\n    if (this.storeHost) {\n      entry.hostname = this.hostname;\n    }\n    if (this.label) {\n      entry.label = this.label;\n    }\n    this.logDb.collection(this.collection).insertOne(entry).then(()=>{\n      this.emit('logged');\n      cb(null, true);\n    }).catch(err=>{\n      this.emit('error', err);\n      cb(err);\n    });\n  });\n};\n\n\n/**\n * Query the transport. Options object is optional.\n * @param {Object=} opt_options Loggly-like query options for this instance.\n * @param {Function} cb Continuation to respond to when complete.\n * @return {*}\n */\nMongoDB.prototype.query = function(opt_options, cb) {\n  if (!this.logDb) {\n    this._opQueue.push({method: 'query', args: arguments});\n    return;\n  }\n  if ('function' === typeof opt_options) {\n    cb = opt_options;\n    opt_options = {};\n  }\n  let options = this.normalizeQuery(opt_options);\n  let query = {timestamp: {$gte: options.from, $lte: options.until}};\n  let opt = {\n    skip: options.start,\n    limit: options.rows,\n    sort: {timestamp: options.order === 'desc' ? -1 : 1}\n  };\n  if (options.fields) {\n    opt.fields = options.fields;\n  }\n  this.logDb.collection(this.collection).find(query, opt).toArray().then(docs=>{\n    if (!options.includeIds) {\n      docs.forEach(log=>delete log._id);\n    }\n    cb(null, docs);\n  }).catch(cb);\n};\n\n\n/**\n * Returns a log stream for this transport. Options object is optional.\n * This will only work with a capped collection.\n * @param {Object} options Stream options for this instance.\n * @param {Stream} stream Pass in a pre-existing stream.\n * @return {Stream}\n */\nMongoDB.prototype.stream = function(options, stream) {\n  options = options || {};\n  stream = stream || new Stream;\n  let start = options.start;\n  if (!this.logDb) {\n    this._opQueue.push({method: 'stream', args: [options, stream]});\n    return stream;\n  }\n  stream.destroy = function() {\n    this.destroyed = true;\n  };\n  if (start === -1) {\n    start = null;\n  }\n  let col = this.logDb.collection(this.collection);\n  if (start != null) {\n    col.find({}, {skip: start}).toArray().then(docs=>{\n      docs.forEach(doc=>{\n        if (!options.includeIds) {\n          delete doc._id;\n        }\n        stream.emit('log', doc);\n      });\n      delete options.start;\n      this.stream(options, stream);\n    }).catch(err=>stream.emit('error', err));\n    return stream;\n  }\n  if (stream.destroyed) {\n    return stream;\n  }\n  col.isCapped().then(capped=>{\n    if (!capped) {\n      return this.streamPoll(options, stream);\n    }\n    let cursor = col.find({}, {tailable: true});\n    stream.destroy = function() {\n      this.destroyed = true;\n      cursor.destroy();\n    };\n    cursor.on('data', doc=>{\n      if (!options.includeIds) {\n        delete doc._id;\n      }\n      stream.emit('log', doc);\n    });\n    cursor.on('error', err=>stream.emit('error', err));\n  }).catch(err=>stream.emit('error', err));\n  return stream;\n};\n\n\n/**\n * Returns a log stream for this transport. Options object is optional.\n * @param {Object} options Stream options for this instance.\n * @param {Stream} stream Pass in a pre-existing stream.\n * @return {Stream}\n */\nMongoDB.prototype.streamPoll = function(options, stream) {\n  options = options || {};\n  stream = stream || new Stream;\n  let self = this;\n  let start = options.start;\n  let last;\n  if (!this.logDb) {\n    this._opQueue.push({method: 'streamPoll', args: [options, stream]});\n    return stream;\n  }\n  if (start === -1) {\n    start = null;\n  }\n  if (start == null) {\n    last = new Date(new Date - 1000);\n  }\n  stream.destroy = function() {\n    this.destroyed = true;\n  };\n  (function check() {\n    let query = last ? {timestamp: {$gte: last}} : {};\n    self.logDb.collection(self.collection).find(query).toArray().then(docs=>{\n      if (stream.destroyed) {\n        return;\n      }\n      if (!docs.length) {\n        return next();\n      }\n      if (start == null) {\n        docs.forEach(doc=>{\n          if (!options.includeIds) {\n            delete doc._id;\n          }\n          stream.emit('log', doc);\n        });\n      } else {\n        docs.forEach(doc=>{\n          if (!options.includeIds) {\n            delete doc._id;\n          }\n          if (!start) {\n            stream.emit('log', doc);\n          } else {\n            start -= 1;\n          }\n        });\n      }\n      last = new Date(docs.pop().timestamp);\n      next();\n    }).catch(err=>{\n      if (stream.destroyed) {\n        return;\n      }\n      next();\n      stream.emit('error', err);\n    });\n    function next() {\n      setTimeout(check, 2000);\n    }\n  })();\n  return stream;\n};\n","/home/travis/build/npmtest/node-npmtest-winston-mongodb/node_modules/winston-mongodb/lib/helpers.js":"/**\n * @module helpers\n * @fileoverview Helpers for winston-mongodb\n * @license MIT\n * @author 0@39.yt (Yurij Mikhalevich)\n */\n'use strict';\nconst common = require('winston/lib/winston/common');\nconst ObjectID = require('mongodb').ObjectID;\n\n\n/**\n * Prepares metadata to store into database.\n * @param {*} meta Metadata\n * @return {*}\n */\nexports.prepareMetaData = meta=>{\n  if (meta instanceof Error) {\n    // This is needed because Error's message, name and stack isn't accessible\n    // through cycling properties and `common.clone` doesn't copies them\n    return {message: meta.message, name: meta.name, stack: meta.stack};\n  }\n  if (typeof meta === 'object' && meta !== null) {\n    meta = makeObjectNonCircular(meta);\n    cleanFieldNames(meta);\n  }\n  meta = common.clone(meta);\n  return meta;\n};\n\n\n/**\n * Removes unexpected characters from metadata field names.\n * @param {Object} object Object to clean\n */\nfunction cleanFieldNames(object) {\n  for (let field in object) {\n    if (!Object.prototype.hasOwnProperty.call(object, field)) {\n      continue;\n    }\n    let value = object[field];\n    if (field.includes('.') || field.includes('$')) {\n      delete object[field];\n      object[field.replace(/\\./g, '[dot]').replace(/\\$/g, '[$]')] = value;\n    }\n    if (typeof value === 'object') {\n      cleanFieldNames(value);\n    }\n  }\n}\n\n\n/**\n * Cleans object from circular references, replaces them with string\n * '[Circular]'\n * @param {Object} node Current object or its leaf\n * @param {Array=} opt_parents Object's parents\n */\nfunction makeObjectNonCircular(node, opt_parents) {\n  opt_parents = opt_parents || [];\n  opt_parents.push(node);\n  let copy = {};\n  for (let key in node) {\n    if (!Object.prototype.hasOwnProperty.call(node, key)) {\n      continue;\n    }\n    let value = node[key];\n    if (typeof value === 'object' && !(value instanceof ObjectID)) {\n      if (opt_parents.indexOf(value) === -1) {\n        copy[key] = makeObjectNonCircular(value, opt_parents);\n      } else {\n        copy[key] = '[Circular]';\n      }\n    } else {\n      copy[key] = value;\n    }\n  }\n  opt_parents.pop();\n  return copy;\n}\n"}